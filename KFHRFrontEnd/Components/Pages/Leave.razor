@page "/leaves"
@using KFHRFrontEnd.Components
@using KFHRFrontEnd.Models
@using System.Net.Http
@using System.Net.Http.Json
@using KFHRBackEnd.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject GlobalAppState AppState

@code {
    private List<Leavee> leaves { get; set; } = new List<Leavee>();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)leaves.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = new HttpClient();
            if (AppState != null)
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);
                leaves = await client.GetFromJsonAsync<List<Leavee>>("https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/GetLeaves");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching leaves: {ex}");
        }
    }

    private IEnumerable<Leavee> PaginatedLeaves => leaves.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Emergency Leave" => "badge badge-red",
            "Sick Leave" => "badge badge-yellow",
            "Pending" => "badge badge-grey",
            _ => "badge badge-secondary"
        };
    }

    private void NavigateToPage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
        }
    }
}

<div class="container-fluid">
    <div class="row">
        <main class="col-12 p-3">
            <header class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1>Leaves</h1>
                    <p>All Employee Leaves</p>
                </div>
                <div class="user-info">
                    <NavLink href="/counter" class="center">
                        <img src="notification.png" />
                    </NavLink>
                    <img src="@AppState.EmployeePic" alt="Profile Picture" class="center" />
                    <div>
                        <h2>@AppState.EmployeeName</h2>
                        <p>HR Manager</p>
                    </div>
                </div>
            </header>
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Leave Type</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var leave in PaginatedLeaves)
                        {
                            <tr>
                                <td>@leave.EmployeeId</td>
                                <td>@leave.LeaveType</td>
                                <td>@leave.StartDate.ToShortDateString()</td>
                                <td>@leave.EndDate.ToShortDateString()</td>
                                <td><span class="@GetStatusClass(leave.Status)">@leave.Status</span></td>
                                <td>@leave.Notes</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between">
                <div>
                    Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, leaves.Count)) out of @leaves.Count records
                </div>
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => NavigateToPage(currentPage - 1)">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            var pageIndex = i;
                            <li class="page-item @(currentPage == pageIndex ? "active" : "")">
                                <button class="page-link" @onclick="@(() => NavigateToPage(pageIndex))">@pageIndex</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => NavigateToPage(currentPage + 1)">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        </main>
    </div>
</div>

<style>
    .container-fluid {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .user-info img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
    }

    .table-bordered {
        border: 1px solid #dee2e6;
    }

    .table thead th {
        vertical-align: bottom;
        border-bottom: 2px solid #dee2e6;
    }

    .table td, .table th {
        padding: .75rem;
        vertical-align: top;
        border-top: 1px solid #dee2e6;
    }

    .badge {
        display: inline-block;
        padding: .35em .65em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: .25rem;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-warning {
        color: #212529;
        background-color: #ffc107;
    }

    .badge-red {
        color: #fff;
        background-color: red;
    }

    .badge-yellow {
        color: #212529;
        background-color: yellow;
    }

    .badge-grey {
        color: #fff;
        background-color: grey;
    }

    .pagination {
        list-style: none;
        padding: 0;
        display: flex;
    }

    .page-item {
        margin: 0 5px;
    }

        .page-item .page-link {
            text-decoration: none;
            color: #007bff;
            cursor: pointer;
        }

        .page-item.active .page-link {
            font-weight: bold;
            color: #0056b3;
        }

    .user-info {
        display: flex;
        align-items: center;
        margin: 1px;
        border: 1px solid #4B995C;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 10px;
        font-size: 24px;
        background-color: #e9f2eb;
    }

        .user-info h2 {
            font-size: 24px;
            margin-bottom: -3px;
        }

        .user-info p {
            font-size: 14px;
            margin-bottom: -3px;
        }

        .user-info img {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }
</style>
