@page "/"

@using KFHRFrontEnd.Components.Layout
@using KFHRBackEnd.Models.Entites.Request
@using KFHRBackEnd.Models.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using KFHRFrontEnd.Models.Responses
@inject HttpClient Http
@layout NoNavbarLayout
@inject NavigationManager Navigation
@inject GlobalAppState AppState

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="container">
    <div class="login-box">
        <img src="login.png" alt="Logo" class="logo">
        <h1>Welcome To KFHR Website</h1>
        <EditForm Model="@loginModel" OnValidSubmit="LoginUserSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="textbox">
                <input type="text" id="employeeEmail" @bind="loginModel.Email" placeholder="Employee Email">
            </div>
            <div class="textbox">
                <input type="password" id="password" @bind="loginModel.Password" placeholder="Password">
            </div>
            <button type="submit" class="btn">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string errorMessage = string.Empty;

    private async Task LoginUserSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/Authentication/Login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokenResponse != null && !string.IsNullOrWhiteSpace(tokenResponse.Token))
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtSecurityToken = handler.ReadJwtToken(tokenResponse.Token);

                    var username = jwtSecurityToken.Claims.FirstOrDefault(c => c.Type == TokenClaimsConstant.Username)?.Value ?? string.Empty;
                    var userId = jwtSecurityToken.Claims.FirstOrDefault(c => c.Type == TokenClaimsConstant.UserId)?.Value ?? string.Empty;
                    var userRole = jwtSecurityToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value == "Admin";

                    if (AppState != null)
                    {
                        AppState.SetAuthData(tokenResponse.Token, username, userId, userRole);
                    }
                    Console.WriteLine($"Login: {AppState.AuthToken}");

                    Navigation.NavigateTo("/dashboard");
                }
                else
                {
                    errorMessage = "Failed to retrieve a valid authentication token. Please try again.";
                }
            }
            else
            {
                errorMessage = "Invalid login credentials. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}

<style>
    .body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        width: 100%;
    }

    .header {
        width: 100%;
        background-color: #4b6b8b; /* Softer color for the header */
        color: #fff;
        padding: 10px 20px;
        position: fixed;
        top: 0;
        left: 0;
    }

        .header span {
            font-size: 18px;
        }

    .login-box {
        background-color: #fff;
        padding: 40px;
        border-radius: 15px; /* Rounded corners */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Softer box shadow */
        text-align: center;
        margin-top: 60px;
    }

    .logo {
        width: 80px;
        height: 80px;
        margin-bottom: 20px;
    }

    .h1 {
        margin: 20px 0;
        font-size: 28px;
        color: #333;
        font-weight: bold;
    }

    .textbox {
        margin: 15px 0;
        border-color: #4B995C;
    }

        .textbox label {
            display: block;
            margin-bottom: 5px;
            color: #777;
            border-color: #4B995C;
        }

        .textbox input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 8px; /* Rounded corners */
            box-sizing: border-box;
            font-size: 16px;
        }

    .btn {
        background-color: #4B995C; /* Softer color */
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 8px; /* Rounded corners */
        cursor: pointer;
        margin-top: 20px;
        width: 100%;
        font-size: 16px;
        transition: background-color 0.3s ease; /* Smooth transition effect */
    }

        .btn:hover {
            background-color: #3c7a49; /* Slightly darker color on hover */
        }
</style>
