@page "/editemployee/{employeeId:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using KFHRFrontEnd.Models
@inject HttpClient Http
@inject GlobalAppState AppState
@inject NavigationManager Navigation

<div class="header">
    <div class="info">
        <h1>All Employees</h1>
        <div class="breadcrumb">
            <a href="allemployees" class="breadcrumb-link">All Employees</a> &gt; <span class="breadcrumb-current"> Edit Employee </span>
        </div>
    </div>
    <div class="user-info">
        <NavLink href="/counter" class="center">
            <img src="notification.png" />
        </NavLink>
        <img src="leasie-watson.jpg" alt="Profile Picture" class="center" />
        <div>
            <h2>Robert Allen</h2>
            <p>HR Manager</p>
        </div>
        </div>
</div>

<div class="container">
    <EditForm Model="@employee" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <!-- Form Row for Image Upload -->
        <div class="form-row">
            <div class="form-group">
                <label for="name">Picture URL</label>
                <InputText id="name" @bind-Value="employee.ProfilePicURL" placeholder="Picture URL" />
            </div>
        </div>
        <!-- Form Row for First and Last Name -->
        <div class="form-row">
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="employee.Name" placeholder="Name" />
            </div>
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" @bind-Value="employee.Email" placeholder="Email Address" />
            </div>
        </div>
        <!-- Form Row for Date of Birth and Marital Status -->
        <div class="form-row">
            <div class="form-group">
                <label for="dob">Date of Birth</label>
                <InputDate id="dob" @bind-Value="employee.DOB" />
            </div>
            <div class="form-group">
                <label for="gender">Gender</label>
                <InputSelect id="gender" @bind-Value="employee.Gender">
                    <option value="">Gender</option>
                    <option value=@Gender.Male>Male</option>
                    <option value=@Gender.Female>Female</option>
                </InputSelect>
            </div>
        </div>
        <!-- Form Row for Employee ID and Department -->
        <div class="form-row">
            <div class="form-group">
                <label for="nfcIdNumber">NFC ID Number</label>
                <InputText id="nfcIdNumber" @bind-Value="employee.NFCIdNumber" placeholder="NFC ID Number" />
            </div>
            <div class="form-group">
                <label for="departmentId">Department</label>
                <InputNumber id="departmentId" @bind-Value="employee.DepartmentId" placeholder="Department" />
            </div>
        </div>
        <!-- Form Row for Position -->
        <div class="form-row">
            <div class="form-group">
                <label for="positionId">Position</label>
                <InputNumber id="positionId" @bind-Value="employee.PositionId" placeholder="Position" />
            </div>
        </div>
        <!-- Form Actions for Cancel and Save Buttons -->
        <div class="form-actions">
            <button type="button" @onclick="NavEmp" class="cancel-button">Cancel</button>
            <button type="submit" class="save-button">Save</button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public int employeeId { get; set; }
    private EditEmployeeRequest employee { get; set; }
    
    protected override Task OnInitializedAsync()
    {
        employee = new EditEmployeeRequest
        {
            Id = employeeId,
            Name = "Test Name",
            Email = "test@example.com",
            ProfilePicURL = "http://example.com/pic.jpg",
            DOB = new DateTime(1990, 1, 1),
            Gender = GenderE.Male,
            PositionId = 1,
            DepartmentId = 1
        };
    return base.OnInitializedAsync();
    }
    

    private async Task HandleValidSubmit()
    {
        try
        {
            if (AppState != null && !string.IsNullOrEmpty(AppState.AuthToken))
            {
                Console.WriteLine($"AuthToken: {AppState.AuthToken}");
                Console.WriteLine($"Employee Name: {employee.Name}");
                Console.WriteLine($"Employee Email: {employee.Email}");

                // Verify payload
                var payload = new
                {
                    name = employee.Name,
                    email = employee.Email,
                    profilePicURL = employee.ProfilePicURL,
                    dob = employee.DOB,
                    gender = employee.Gender,
                    positionName = employee.Name,
                    departmentId = employee.DepartmentId, // Send departmentId as a single integer
                    pointsEarned = 10
                };

                Console.WriteLine($"Payload: {System.Text.Json.JsonSerializer.Serialize(payload)}");

                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);

                var response = await Http.PutAsJsonAsync($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/EditEmployee/{employeeId}", payload);

                Console.WriteLine("HTTP response received");

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Employee edited successfully");
                    Navigation.NavigateTo("/allemployees");
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error editing employee: {response.ReasonPhrase}, Content: {errorContent}");
                }
            }
            else
            {
                Console.WriteLine("AppState is null or AuthToken is missing");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP error editing employee: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General error editing employee: {ex.Message}");
        }
    }

    public void NavEmp()
    {
        Console.WriteLine("NavEmp called");
        Navigation.NavigateTo("/allemployees");
    }
}


<style>
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .header .info h1 {
            margin: 0;
            font-size: 34px;
        }

        .header .info p {
            font-size: 14px;
            color: dimgrey;
        }

        .header .user-info {
            display: flex;
            align-items: center;
            margin: 1px;
            border: 1px solid #4B995C;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            padding: 10px;
            font-size: 24px;
            background-color: #e9f2eb;
        }

            .header .user-info h2 {
                font-size: 24px;
                margin-bottom: -3px;
            }

            .header .user-info p {
                font-size: 14px;
                margin-bottom: -3px;
            }

            .header .user-info img {
                border-radius: 50%;
                width: 50px;
                height: 50px;
                margin-right: 10px;
            }

    .breadcrumb {
        font-size: 14px;
        color: #777;
        display: flex;
        align-items: center;
    }

    .breadcrumb-link {
        color: #4B995C;
        text-decoration: none;
        transition: color 0.3s;
    }

        .breadcrumb-link:hover {
            color: #006400;
        }

    .breadcrumb-current {
        color: #333;
        margin-left: 5px;
    }

    .body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    .container {
        width: 60%;
        margin: 20px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .h1 {
        font-size: 24px;
        margin-bottom: 20px;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
        flex-basis: 48%;
    }

        .form-group label {
            font-size: 14px;
            margin-bottom: 5px;
            color: #555;
        }

        .form-group input,
        .form-group select {
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f8f8f8;
        }

            .form-group input::placeholder {
                color: #aaa;
            }

    .file-input {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100px;
        max-width: 100px;
        max-height: 100px;
        border: 2px dashed #ddd;
        border-radius: 8px;
        background-color: #f8f8f8;
        cursor: pointer;
        overflow: hidden;
    }

        .file-input input[type="file"] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .file-input .file-label {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }

            .file-input .file-label img {
                width: 24px;
                height: 24px;
            }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .cancel-button,
    .save-button {
        padding: 10px 20px;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .cancel-button {
        background-color: #fff;
        border: 1px solid #ddd;
        margin-right: 10px;
    }

    .save-button {
        background-color: #28a745;
        color: #fff;
    }
</style>
