@page "/employeedetails/{employeeId:int}"

@using System.Net.Http
@using System.Net.Http.Json
@using KFHRFrontEnd.Models
@inject HttpClient Http
@inject GlobalAppState AppState
@inject NavigationManager Navigation

<body>
    <div class="container">
        <!-- Main Content -->
        <main class="main-content">
            <header class="header">
                <div class="breadcrumb">
                    <a href="allemployees" class="breadcrumb-link">All Employees</a> &gt; <span class="breadcrumb-current">@employee.Name</span>
                </div>
                <div class="user-info">
                    <img src="notification.png" />
                    <img src="@AppState.EmployeePic" alt="Profile Picture" class="center" />
                    <div>
                        <h2>@AppState.EmployeeName</h2> <!-- Change Robert Allen to HR employee.Name -->
                        <p>HR Manager</p> <!-- Change HR Nanager to HR employee.Name -->
                    </div>
                </div>
            </header>

            <section class="profile-section">
                <div class="profile-header">
                    <div class="profile-picture">
                        <img src="@employee.ProfilePicURL" alt="@employee.Name"> <!-- Change Brooklyn Simmons to employee.Name -->
                    </div>
                    <div class="profile-details">
                        <h1>
                            @employee.Name <!-- Change Brooklyn Simmons to employee Name -->
                            <img src="edit-icon.png" alt="Edit" class="edit-icon" @onclick="EditEmployee">
                        </h1>
                        <p>@employee.PositionName</p>  <!-- Change Project Manager to employee.Position -->
                        <p>@employee.Email</p> <!-- Change the email to employee.Email -->
                    </div>
                </div>
                <div class="profile-actions">
                    <button class="profile-button active" onclick="showSection('profile')">Profile</button>
                    <button class="profile-button" onclick="showSection('attendance')">Attendance</button>
                    <button class="profile-button" onclick="showSection('certificates')">Certificates</button>
                    <button class="profile-button" onclick="showSection('leave')">Leave</button>
                </div>
                <div id="profile" class="profile-info section">
                    <div class="table-container">
                        <table class="styled-table profile-table">
                            <tr>
                                <th>Name</th>
                                <td>@employee.Name</td>
                                <th>Email Address</th>
                                <td>@employee.Email</td>
                            </tr>
                            <tr>
                                <th>Date of Birth</th>
                                <td>@employee.DOB.ToString("dd/MM/yyyy")</td>
                                <th>Gender</th>
                                <td>@employee.Gender</td>
                            </tr>
                            <tr>
                                <th>Position</th>
                                <td>@employee.PositionName</td>
                                <th>Department</th>
                                <td>@employee.DepartmentId?.DepartmentName</td>
                            </tr>
                        </table>
                    </div>
                </div>
                <div id="attendance" class="profile-info section" style="display:none;">
                    <table class="styled-table no-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Check In</th>
                                <th>Check Out</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var attendance in employeeAttendance)
                            {
                                <tr>
                                    <td>@attendance.CheckInTime.ToString("MMMM dd, yyyy")</td>
                                    <td>@attendance.CheckInTime.ToString("hh:hh tt")</td>
                                    @if(attendance.CheckOutTime == null)
                                    {
                                        <td>@attendance.CheckOutTime --</td>
                                    }
                                    else
                                    {
                                        <td>@attendance.CheckOutTime.ToString("hh:hh tt")</td>
                                    }
                                   
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div id="certificates" class="profile-info section" style="display:none;">
                    <div class="table-container">
                        <table class="styled-table no-hover">
                            <thead>
                                <tr>
                                    <th>Certificate Name</th>
                                    <th>Issue Date</th>
                                    <th>Expiration Date</th>
                                    <th>Verification URL</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var certificate in employeeCertificate)
                                {
                                    <tr>
                                        <td>@certificate.CertificateName</td>
                                        <td>@certificate.issueDate.ToString("MM/dd/yyyy")</td>
                                        <td>@certificate.expirationDate.ToString("MM/dd/yyyy")</td>
                                        <td>@certificate.verificationURL</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div id="leave" class="profile-info section" style="display:none;">
                    <h2>Leave Records</h2>
                    <div class="table-container">
                        <table class="styled-table">
                            <thead>
                                <tr>
                                    <th>Leave Type</th>
                                    <th>Date Submitted</th>
                                    <th>Start Date</th>
                                    <th>End Date</th>
                                    <th>Status</th>
                                    <th>Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var leave in employeeLeaves)
                                {
                                    <tr>
                                        <td>@leave.leaveType</td>
                                        <td>@leave.StartDate.Date.ToString("MMMM dd, yyyy")</td>
                                        <td>@leave.StartDate.ToString("MMMM dd, yyyy")</td>
                                        <td>@leave.EndDate.ToString("MMMM dd, yyyy")</td>
                                        <td>
                                            <select class="status-dropdown" @onchange="e => UpdateLeaveStatus(leave.Id, ((ChangeEventArgs)e).Value.ToString())">
                                                <option value="rejected" class="status rejected" selected="@(leave.Status == "pending")">Pending</option>
                                                <option value="rejected" class="status rejected" selected="@(leave.Status == "approved")">Approved</option>
                                                <option value="rejected" class="status rejected" selected="@(leave.Status == "rejected")">Rejected</option>
                                            </select>
                                        </td>
                                        <td>@leave.notes</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </main>
    </div>
</body>



@code {

    [Parameter] public int employeeId { get; set; }
    private EmployeeProfileDetails employee = new EmployeeProfileDetails();
    private List<EmployeeAttendance> employeeAttendance = new List<EmployeeAttendance>();
    private List<EmployeeCertificate> employeeCertificate = new List<EmployeeCertificate>();
    private List<EmployeeLeaves> employeeLeaves = new List<EmployeeLeaves>();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AppState != null)
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);
                employee = await Http.GetFromJsonAsync<EmployeeProfileDetails>($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/Employees?employeeId={employeeId}");

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee: {ex.Message}");
        }


        try
        {
            if (AppState != null)
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);
                employeeAttendance = await Http.GetFromJsonAsync<List<EmployeeAttendance>>($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/GetAttendancesByEmployee/{employeeId}");
                Console.WriteLine(employeeAttendance);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee attendances: {ex.Message}");
        }

        try
        {
            if (AppState != null)
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);
                employeeCertificate = await Http.GetFromJsonAsync<List<EmployeeCertificate>>($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/GetCertificatesByEmployee/{employeeId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee certificates: {ex.Message}");
        }

        try
        {
            if (AppState != null)
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AppState.AuthToken);
                employeeLeaves = await Http.GetFromJsonAsync<List<EmployeeLeaves>>($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/GetLeavesByEmployeeId/{employeeId}");
                Console.WriteLine(employeeLeaves);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee leaves: {ex.Message}");
        }

    }

    private void EditEmployee()
    {
        Navigation.NavigateTo($"/editemployee/{employeeId}");
    }

    private async Task UpdateLeaveStatus(int leaveId, string newStatus)
    {
        var updateLeaveStatus = new { status = newStatus };
        var response = await Http.PutAsJsonAsync($"https://kfhrbackend20240528002909.azurewebsites.net/api/Admin/UpdateLeaveStatus/{leaveId}", updateLeaveStatus);

        if (response.IsSuccessStatusCode)
        {
            var updatedLeave = await response.Content.ReadFromJsonAsync<EmployeeLeaves>();
            var leave = employeeLeaves.FirstOrDefault(l => l.Id == leaveId);
            if (leave != null)
            {
                leave.Status = updatedLeave.Status;
            }
        }
        else
        {
            Console.WriteLine($"Error updating leave status: {response.ReasonPhrase}");
        }
    }
}

<script>
    function showSection(sectionId) {
        var sections = document.querySelectorAll('.section');
        sections.forEach(function (section) {
            section.style.display = 'none';
        });

        var buttons = document.querySelectorAll('.profile-button');
        buttons.forEach(function (button) {
            button.classList.remove('active');
        });

        document.getElementById(sectionId).style.display = 'block';
        event.target.classList.add('active');
    }

    function updateStatus(selectElement) {
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        const statusClass = selectedOption.className.split(' ')[1];
        selectElement.className = 'status-dropdown ' + statusClass;
    }

    function editName() {
        alert('Edit name functionality goes here');
    }

    document.addEventListener('DOMContentLoaded', function () {
        const statusDropdowns = document.querySelectorAll('.status-dropdown');
        statusDropdowns.forEach(function (dropdown) {
            updateStatus(dropdown);
        });

        showSection('profile');
    });
</script>


<style>
    .container {
        display: flex;
        width: 100%; /* Ensure full width */
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-radius: 10px;
    }

    .main-content {
        flex-grow: 1;
        padding: 20px;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .breadcrumb {
        font-size: 14px;
        color: #777;
        display: flex;
        align-items: center;
    }

    .breadcrumb-link {
        color: #4B995C;
        text-decoration: none;
        transition: color 0.3s;
    }

        .breadcrumb-link:hover {
            color: #006400;
        }

    .breadcrumb-current {
        color: #333;
        margin-left: 5px;
    }

    .header .user-info {
        display: flex;
        align-items: center;
        margin: 1px;
        border: 1px solid #4B995C;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 10px;
        font-size: 24px;
        background-color: #e9f2eb;
    }

        .header .user-info h2 {
            font-size: 24px;
            margin-bottom: -3px;
        }

        .header .user-info p {
            font-size: 14px;
            margin-bottom: -3px;
        }

        .header .user-info img {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }

    .profile-section {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        padding: 20px;
    }

    .profile-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .profile-picture img {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        margin-right: 20px;
    }

    .profile-details h1 {
        margin: 0;
        font-size: 24px;
        display: flex;
        align-items: center;
    }

    .profile-details p {
        margin: 5px 0;
        color: #777;
    }

    .profile-actions {
        display: flex; /* Display as flexbox */
        justify-content: center; /* Center the buttons */
        margin-bottom: 20px;
    }

    .profile-button {
        background-color: #f7f8fa;
        border: none;
        padding: 10px 20px;
        margin: 0 5px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        color: #4B995C;
    }

        .profile-button.active {
            background-color: #4B995C;
            color: #fff;
        }

        .profile-button:hover {
            background-color: #e6e6e6;
        }

    .profile-info {
        margin-top: 20px;
    }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
    }

        .styled-table th, .styled-table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #ddd;
        }

        .styled-table th {
            background-color: #f7f8fa;
            font-weight: bold;
        }

        .styled-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }

    .no-hover tr:hover {
        background-color: initial;
    }

    .profile-table td {
        background-color: #fff; /* White background for info cells */
    }

    .table-container {
        width: 100%; /* Full width for the table container */
        margin: 20px 0;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        border-radius: 10px;
        overflow-x: auto;
    }

    .delete-button {
        background: none;
        border: none;
        color: #ff0000;
        cursor: pointer;
    }

    .certificate-inputs {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

        .certificate-inputs input {
            width: 30%; /* Adjust width to accommodate the save button */
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

    .save-button {
        background-color: #4B995C; /* Green background */
        color: #fff; /* White font */
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .save-button:hover {
            background-color: #218838;
        }

    .edit-icon {
        width: 20px;
        height: 20px;
        margin-left: 10px;
        cursor: pointer;
    }

    /* Styles for Leave Status */
    .status {
        padding: 5px 10px;
        border-radius: 5px;
        text-align: center;
        display: inline-block;
        font-size: 12px;
        font-weight: bold;
        width: 100px; /* Set a fixed width for status */
    }

        .status.pending {
            background-color: #ffeb3b;
            color: #fff;
        }

        .status.approved {
            background-color: #4caf50;
            color: #fff;
        }

        .status.rejected {
            background-color: #f44336;
            color: #fff;
        }

    .status-dropdown {
        border: none;
        background: none;
        font-size: 12px;
        padding: 5px;
        cursor: pointer;
        background-color: transparent; /* Default background */
        width: 100px; /* Set the same fixed width as status */
    }

        .status-dropdown.pending {
            background-color: #ffeb3b;
            color: #fff;
        }

        .status-dropdown.approved {
            background-color: #4caf50;
            color: #fff;
        }

        .status-dropdown.rejected {
            background-color: #f44336;
            color: #fff;
        }

        .status-dropdown:hover {
            background-color: #dcdcdc; /* Hover color */
        }

        .status-dropdown option {
            padding: 5px 10px;
        }
</style>